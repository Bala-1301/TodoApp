{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["/*import React from 'react';\nimport deepmerge from 'deepmerge';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n\nimport { ThemeConsumer } from './ThemeProvider';\nimport DefaultTheme from './theme';\n\nconst isClassComponent = Component =>\n  Boolean(Component.prototype && Component.prototype.isReactComponent);\n\nconst withTheme = (WrappedComponent, themeKey) => {\n  class ThemedComponent extends React.Component {\n    render() {\n      const { forwardedRef, children, ...rest } = this.props;\n\n      return (\n        <ThemeConsumer>\n          {context => {\n            // If user isn't using ThemeProvider\n            if (!context) {\n              const props = { ...rest, theme: DefaultTheme, children };\n\n              return isClassComponent(WrappedComponent) ? (\n                <WrappedComponent ref={forwardedRef} {...props} />\n              ) : (\n                <WrappedComponent {...props} />\n              );\n            }\n\n            const { theme, updateTheme, replaceTheme } = context;\n            const props = {\n              theme,\n              updateTheme,\n              replaceTheme,\n              ...deepmerge((themeKey && theme[themeKey]) || {}, rest),\n              children,\n            };\n\n            if (isClassComponent(WrappedComponent)) {\n              return <WrappedComponent ref={forwardedRef} {...props} />;\n            }\n            return <WrappedComponent {...props} />;\n          }}\n        </ThemeConsumer>\n      );\n    }\n  }\n\n  const name = themeKey\n    ? `Themed.${themeKey}`\n    : `Themed.${WrappedComponent.displayName ||\n        WrappedComponent.name ||\n        'Component'}`;\n\n  if (isClassComponent(WrappedComponent)) {\n    const forwardRef = (props, ref) => (\n      <ThemedComponent {...props} forwardedRef={ref} />\n    );\n\n    forwardRef.displayName = name;\n    return hoistNonReactStatics(React.forwardRef(forwardRef), WrappedComponent);\n  }\n\n  ThemedComponent.displayName = name;\n  return ThemedComponent;\n};\n\nexport default withTheme;\n*/"]},"metadata":{},"sourceType":"script"}